name: Security · OWASP ZAP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  zap-scan:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vetcare
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    env:
      PORT: 4000
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vetcare?schema=public

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
          cache-dependency-path: backend/package-lock.json

      - name: Install jq & curl
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Install deps (backend)
        working-directory: backend
        run: |
          npm ci
          npm install --save-dev @types/node

      - name: Prisma generate & migrate
        working-directory: backend
        run: |
          npx prisma generate --schema prisma/schema.prisma
          npx prisma migrate deploy --schema prisma/schema.prisma

      - name: Build API (type-check, non-blocking)
        working-directory: backend
        run: |
          echo "Running TypeScript build to check for errors..."
          npm run build || echo "⚠️ TypeScript build failed, but continuing for ZAP scan."

      - name: Start API (background) and wait
        working-directory: backend
        run: |
          npx tsx src/server.ts > server.log 2>&1 &
          for i in {1..60}; do
            if curl -sf "http://localhost:${PORT}/api/ping" >/dev/null; then
              echo "✅ API is up"
              exit 0
            fi
            sleep 2
          done
          echo "❌ API failed to start"
          tail -n 200 server.log || true
          exit 1

      - name: Get Admin JWT (register if needed)
        env:
          API: http://localhost:${{ env.PORT }}/api
          ADMIN_EMAIL: admin@vetcare.local
          ADMIN_PASSWORD: admin123
        run: |
          set -e
          login() {
            curl -fsS "$API/auth/login" \
              -H "Content-Type: application/json" \
              -d "{\"email\":\"$ADMIN_EMAIL\",\"password\":\"$ADMIN_PASSWORD\"}" \
            | jq -r '.tokens.access // empty'
          }
          ACCESS="$(login || true)"
          if [ -z "$ACCESS" ]; then
            echo "Login failed; registering admin…"
            curl -fsS "$API/auth/register" \
              -H "Content-Type: application/json" \
              -d "{\"email\":\"$ADMIN_EMAIL\",\"password\":\"$ADMIN_PASSWORD\",\"name\":\"Admin\"}" \
              || true
            sleep 2
            ACCESS="$(login || true)"
          fi
          if [ -z "$ACCESS" ]; then
            echo "Failed to get admin token" >&2
            curl -sS "$API/ping" || true
            exit 1
          fi
          echo "ACCESS=$ACCESS" >> "$GITHUB_ENV"
          echo "Got admin token."

      - name: Pull ZAP image
        run: docker pull ghcr.io/zaproxy/zaproxy:stable

      - name: ZAP Baseline (passive, continue on alerts)
        run: |
          set +e
          docker run --rm -t --network host \
            -v "$PWD":/zap/wrk:rw ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t http://localhost:${{ env.PORT }}/api -r zap-baseline.html || true
          echo "ZAP Baseline completed — continuing even if alerts found."

      - name: ZAP API Scan (OpenAPI, continue on alerts)
        env:
          ACCESS: ${{ env.ACCESS }}
        run: |
          set +e
          docker run --rm -t --network host \
            -v "$PWD":/zap/wrk:rw ghcr.io/zaproxy/zaproxy:stable \
            zap-api-scan.py -t http://localhost:${{ env.PORT }}/api/docs/openapi.json -f openapi \
            -r zap-openapi.html \
            -z "
              -config replacer.full_list(0).description=auth
              -config replacer.full_list(0).enabled=true
              -config replacer.full_list(0).matchtype=REQ_HEADER
              -config replacer.full_list(0).matchstr=Authorization
              -config replacer.full_list(0).replacement=Bearer ${ACCESS}
            " || true
          echo "ZAP API scan completed — continuing even if alerts found."

      - name: Upload ZAP Reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: |
            zap-baseline.html
            zap-openapi.html
