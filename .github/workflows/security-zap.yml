name: Security Â· OWASP ZAP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  zap-scan:
    runs-on: ubuntu-latest
    env:
      # unique compose project per run to avoid name collisions
      COMPOSE_PROJECT_NAME: zap-${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install jq & curl
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      # make sure nothing is left over from a previous attempt
      - name: Pre-clean (best effort)
        run: docker compose -f infra/docker-compose.yml down -v --remove-orphans || true

      # build and start the full stack defined in compose (db + mailhog + api)
      - name: Build API image
        run: docker compose -f infra/docker-compose.yml build api

      - name: Start stack
        run: docker compose -f infra/docker-compose.yml up -d api

      - name: Wait for API to be ready
        env:
          URL: http://localhost:4000
        run: |
          echo "Waiting for $URL ..."
          for i in $(seq 1 60); do
            if curl -fsS "$URL" >/dev/null; then
              echo "API is up"
              exit 0
            fi
            sleep 2
          done
          echo "API did not become ready in time" >&2
          docker compose -f infra/docker-compose.yml logs api || true
          exit 1

      - name: Get Admin JWT (register if needed)
        env:
          API: http://localhost:4000
          ADMIN_EMAIL: admin@vetcare.local
          ADMIN_PASSWORD: admin123
        run: |
          set -e
          login() {
            curl -fsS "$API/auth/login" \
              -H "Content-Type: application/json" \
              -d "{\"email\":\"$ADMIN_EMAIL\",\"password\":\"$ADMIN_PASSWORD\"}" \
            | jq -r '.tokens.access // empty'
          }
          ACCESS="$(login || true)"
          if [ -z "$ACCESS" ]; then
            echo "Login failed; attempting to register admin then retry login..."
            curl -fsS "$API/auth/register" \
              -H "Content-Type: application/json" \
              -d "{\"email\":\"$ADMIN_EMAIL\",\"password\":\"$ADMIN_PASSWORD\",\"name\":\"Admin\"}" \
              || true
            sleep 2
            ACCESS="$(login || true)"
          fi
          if [ -z "$ACCESS" ]; then
            echo "Failed to get admin token" >&2
            curl -sS "$API" || true
            docker compose -f infra/docker-compose.yml logs api || true
            exit 1
          fi
          echo "ACCESS=$ACCESS" >> "$GITHUB_ENV"
          echo "Got admin token."

      - name: Pull ZAP image (GHCR)
        run: docker pull ghcr.io/zaproxy/zaproxy:stable

      - name: ZAP Baseline (passive)
        run: |
          docker run --rm -t --network host \
            -v "$PWD":/zap/wrk:rw ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t http://localhost:4000 -r zap-baseline.html \
            -c /zap/wrk/infra/zap-rules.tsv

      - name: ZAP API Scan (active, OpenAPI)
        env:
          ACCESS: ${{ env.ACCESS }}
        run: |
          docker run --rm -t --network host \
            -v "$PWD":/zap/wrk:rw ghcr.io/zaproxy/zaproxy:stable \
            zap-api-scan.py -t http://localhost:4000/docs/openapi.json -f openapi \
            -r zap-openapi.html -c /zap/wrk/infra/zap-rules.tsv \
            -z "
              -config replacer.full_list(0).description=auth
              -config replacer.full_list(0).enabled=true
              -config replacer.full_list(0).matchtype=REQ_HEADER
              -config replacer.full_list(0).matchstr=Authorization
              -config replacer.full_list(0).replacement=Bearer ${ACCESS}
            "

      - name: Upload ZAP Reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: |
            zap-baseline.html
            zap-openapi.html

      - name: Stop stack
        if: always()
        run: docker compose -f infra/docker-compose.yml down -v
