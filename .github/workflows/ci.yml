name: Backend CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vetcare
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    env:
      PORT: 4000
      NODE_ENV: test
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vetcare?schema=public

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: backend/package-lock.json

      - name: Install deps (backend)
        working-directory: backend
        run: npm ci

      - name: Generate Prisma client
        working-directory: backend
        run: npx prisma generate --schema prisma/schema.prisma

      - name: Migrate DB
        working-directory: backend
        run: npx prisma migrate deploy --schema prisma/schema.prisma

      # Optional: keep build to ensure TS compiles, but we won't rely on dist/ to run
      - name: Build server (type-check)
        working-directory: backend
        run: npm run build

      # âœ… Start API directly from TS using tsx (avoids dist/app import issues)
      - name: Start API & healthcheck
        working-directory: backend
        run: |
          npx tsx src/server.ts > server.log 2>&1 &
          for i in {1..60}; do
            curl -sf "http://localhost:${PORT}/api/ping" && exit 0
            sleep 1
          done
          echo "API failed to start"
          tail -n 200 server.log || true
          exit 1
