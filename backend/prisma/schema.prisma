generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  VET
  ADMIN
}

enum ApptStatus {
  BOOKED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  name         String?
  passwordHash String
  role         Role    @default(OWNER)
  suspended    Boolean @default(false)

  pets Pet[]

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ResetTokens ResetToken[]
}

model Pet {
  id          String   @id @default(cuid())
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String
  name        String
  species     String?
  breed       String?
  gender      String?
  color       String?
  dob         DateTime?
  ageYears    Int?
  ageMonths   Int?
  weightKg    Float?
  microchipId String?
  vaccinated  Boolean? @default(false)
  neutered    Boolean? @default(false)
  notes       String?

  archived   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Add missing back-relations:
  appointments Appointment[]
  vaccinations Vaccination[]
  medications  Medication[]
}

model Vet {
  id        String  @id @default(cuid())
  name      String
  email     String? @unique
  phone     String?
  specialty String?
  bio       String?
  active    Boolean @default(true)

  availabilities VetAvailability[]
  appointments   Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VetAvailability {
  id    String @id @default(cuid())
  vetId String
  vet   Vet    @relation(fields: [vetId], references: [id], onDelete: Cascade)

  // 0 = Sunday ... 6 = Saturday
  weekday Int

  // minutes from midnight (0..1440)
  startMinutes Int
  endMinutes   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([vetId, weekday])
}

model Appointment {
  id    String @id @default(cuid())
  petId String
  pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade)
  vetId String
  vet   Vet    @relation(fields: [vetId], references: [id], onDelete: Cascade)

  start  DateTime
  end    DateTime
  status ApptStatus @default(BOOKED)
  reason String?
  notes  String?

  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([vetId, start, end])
  @@index([petId, start])
}

model Vaccination {
  id    String @id @default(cuid())
  petId String
  pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade)

  name    String
  givenAt DateTime
  notes   String?

  createdAt DateTime @default(now())

  @@index([petId, givenAt])
}

model Medication {
  id    String @id @default(cuid())
  petId String
  pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade)

  name         String
  dosage       String
  startAt      DateTime
  durationDays Int
  notes        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([petId, startAt])
}

model Payment {
  id            String      @id @default(cuid())
  appointmentId String
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  amountCents Int
  currency    String        @default("CAD")
  status      PaymentStatus @default(PENDING)

  method      String?
  providerRef String?
  receiptNo   String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([appointmentId, status])
}

model ResetToken {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
}

enum AuditAction {
  LOGIN_SUCCESS
  LOGIN_FAILED
  PASSWORD_RESET_REQUEST
  PASSWORD_RESET_COMPLETE
  USER_SUSPEND
  USER_UNSUSPEND
}

model AuditLog {
  id         String      @id @default(cuid())
  userId     String?     @db.VarChar(36)
  action     AuditAction
  meta       Json?
  ip         String?     @db.VarChar(64)
  userAgent  String?     @db.VarChar(512)
  createdAt  DateTime    @default(now())

  @@index([userId, createdAt])
}
